name: App Build and Release

concurrency:
  group: build-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  actions: read
      
on:
  workflow_dispatch:  # Allows manual triggering from any branch
    inputs:
      branch:
        description: 'Branch to build'
        required: false
        default: ''
  push:
    tags:
      - 'release-v*'       # Trigger for tags that start with 'v', e.g., v1.0.0, v2.1.3

jobs:
  build:
    runs-on: ${{ matrix.os }} 
    strategy:
      matrix:
       os: [macos-latest, windows-latest, ubuntu-latest]
       arch: [x64, arm64]
        

    steps:
      # Free disk space on Ubuntu runners (most common for space issues)
      - name: Free Disk Space (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          echo "Disk space before cleanup:"
          df -h
          
          # Remove large packages
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /opt/hostedtoolcache/CodeQL
          
          # Clean Docker (if installed)
          docker system prune -af || true
          
          # Clean apt cache
          sudo apt clean
          
          # Remove .NET SDKs that we don't need
          sudo rm -rf /usr/share/dotnet/sdk/7.*
          sudo rm -rf /usr/share/dotnet/sdk/6.*
          sudo rm -rf /usr/share/dotnet/sdk/5.*
          sudo rm -rf /usr/share/dotnet/sdk/3.*
          
          echo "Disk space after cleanup:"
          df -h      

      # Free disk space on MacOS runners
      - name: Free Disk Space (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          echo "Disk space before cleanup:"
          df -h
          
          # Remove unnecessary files
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/hostedtoolcache
          sudo rm -rf /usr/local/share/powershell
          sudo rm -rf /usr/local/share/chromium
          sudo rm -rf /opt/CodeQL
          
          # Clean Homebrew cache
          brew cleanup
          brew autoremove
          
          echo "Disk space after cleanup:"
          df -h
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Read Version
        id: get_version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "** workflow_dispatch"
            VERSION="0.0.1"
          elif [[ "${{ github.ref_type }}" == "tag" ]]; then
            echo "** tag"
            VERSION=${GITHUB_REF#refs/tags/}
            VERSION=${VERSION#release-v}
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "v$VERSION" > OpenIPC_Config/VERSION
        shell: bash

      - name: Restore dependencies
        run: dotnet restore OpenIPC_Config.Desktop/OpenIPC_Config.Desktop.csproj

      # Clean up before build to free space
      - name: Clean build directories
        run: |
          rm -rf ./OpenIPC_Config.Desktop/bin || true
          rm -rf ./OpenIPC_Config.Desktop/obj || true
        shell: bash  

      - name: Build project
        run: dotnet build OpenIPC_Config.Desktop/OpenIPC_Config.Desktop.csproj --configuration Release

      - name: Run Tests
        if: matrix.os == 'ubuntu-latest' && matrix.arch == 'x64'
        run: dotnet test OpenIPC_Config.Tests/OpenIPC_Config.Tests.csproj --configuration Release --logger "trx;LogFileName=test-results.trx"

      - name: Publish Project
        run: |
          # Only publish for the current matrix architecture
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            dotnet publish OpenIPC_Config.Desktop/OpenIPC_Config.Desktop.csproj -c Release -r win-${{ matrix.arch }} --self-contained -p:PublishSingleFile=true
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            dotnet publish OpenIPC_Config.Desktop/OpenIPC_Config.Desktop.csproj -c Release -r osx-${{ matrix.arch }} --self-contained -p:PublishSingleFile=true
          else
            dotnet publish OpenIPC_Config.Desktop/OpenIPC_Config.Desktop.csproj -c Release -r linux-${{ matrix.arch }} --self-contained -p:PublishSingleFile=true
          fi
          # if [[ "${{ runner.os }}" == "Windows" ]]; then
          #   dotnet publish OpenIPC_Config.Desktop/OpenIPC_Config.Desktop.csproj -c Release -r win-x64 --self-contained -p:PublishSingleFile=true
          #   dotnet publish OpenIPC_Config.Desktop/OpenIPC_Config.Desktop.csproj -c Release -r win-arm64 --self-contained -p:PublishSingleFile=true
          # elif [[ "${{ runner.os }}" == "macOS" ]]; then
          #   dotnet publish OpenIPC_Config.Desktop/OpenIPC_Config.Desktop.csproj -c Release -r osx-x64 --self-contained -p:PublishSingleFile=true
          #   dotnet publish OpenIPC_Config.Desktop/OpenIPC_Config.Desktop.csproj -c Release -r osx-arm64 --self-contained -p:PublishSingleFile=true
          # else
          #   dotnet publish OpenIPC_Config.Desktop/OpenIPC_Config.Desktop.csproj -c Release -r linux-x64 --self-contained -p:PublishSingleFile=true
          #   dotnet publish OpenIPC_Config.Desktop/OpenIPC_Config.Desktop.csproj -c Release -r linux-arm64 --self-contained -p:PublishSingleFile=true
          # fi
        shell: bash

      - name: Decode signing certificate
        if: matrix.os == 'macos-latest'
        env:
           APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
        run: |
          echo "$APPLE_CERTIFICATE" | base64 --decode > macos_signing_cert.p12
          echo "$MACOS_PROVISION_PROFILE" | base64 --decode > macos_provision_profile.mobileprovision

      - name: Create and manage custom keychain
        if: matrix.os == 'macos-latest'
        env:
           MY_KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
           APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
        run: |
          echo "Creating custom keychain"
          security create-keychain -p $MY_KEYCHAIN_PASSWORD build.keychain

          echo "Importing signing certificate"
          security import macos_signing_cert.p12 -k build.keychain -P $APPLE_CERTIFICATE_PASSWORD -T /usr/bin/codesign

          echo "Unlocking keychain"
          security unlock-keychain -p $MY_KEYCHAIN_PASSWORD build.keychain

          echo "Setting key partition list"
          security set-key-partition-list -S apple-tool:,apple: -s -k $MY_KEYCHAIN_PASSWORD build.keychain

        
      - name: Package and Sign macOS Build
        if: matrix.os == 'macos-latest'
        run: |

          echo "Disk space before package and sign:"
          df -h

          echo "Directory Structure Before:"
          ls -al
          
          # Define paths
          APP_NAME="OpenIPC_Config"
          PUBLISH_DIR="./OpenIPC_Config.Desktop/bin/Release/net8.0/osx-${{ matrix.arch }}/publish"
          APP_DIR="${APP_NAME}.app"
          DMG_NAME="OpenIPC-Config-macos-${{ matrix.arch }}.dmg"

          # Aggressively clean unnecessary files
          find "${PUBLISH_DIR}" -name "*.pdb" -delete
          find "${PUBLISH_DIR}" -name "*.config" -delete
          find "${PUBLISH_DIR}" -name "*.xml" -delete
    
          # Create .app bundle (existing code)
          mkdir -p "${APP_DIR}/Contents/MacOS"
          mkdir -p "${APP_DIR}/Contents/Resources"
          cp -R "${PUBLISH_DIR}/"* "${APP_DIR}/Contents/MacOS/"
          cp ./OpenIPC_Config/Assets/Icons/OpenIPC.icns "${APP_DIR}/Contents/Resources/${APP_NAME}.icns"
      
          # Create Info.plist (existing code)
          cat << EOF > "${APP_DIR}/Contents/Info.plist"
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>CFBundleName</key>
            <string>${APP_NAME}</string>
            <key>CFBundleExecutable</key>
            <string>${APP_NAME}.Desktop</string>
            <key>CFBundleIdentifier</key>
            <string>com.openipc.${APP_NAME}</string>
            <key>CFBundleVersion</key>
            <string>${{ env.VERSION }}</string>
            <key>CFBundlePackageType</key>
            <string>APPL</string>
            <key>LSMinimumSystemVersion</key>
            <string>10.13</string>
            <key>CFBundleIconFile</key>
            <string>${APP_NAME}.icns</string>
          </dict>
          </plist>
          EOF
      
          chmod +x "${APP_DIR}/Contents/MacOS/${APP_NAME}.Desktop"
      
          # Sign the application
          security list-keychains -d user -s build.keychain-db
          security find-identity
          codesign --deep --force --verify --verbose --sign "Developer ID Application: Mike Carr (EQKLR945TW)" "${APP_DIR}"
      
          # Verify signature
          codesign --verify --verbose=4 "${APP_DIR}"
          spctl --assess --type execute --verbose "${APP_DIR}"

          
          # Create DMG
          mkdir dmg_build
          cp -R "${APP_DIR}" dmg_build/
          ln -s /Applications dmg_build/Applications

          # Before DMG creation
          echo "Contents of dmg_build:"
          ls -lR dmg_build
          
          echo "Total size of dmg_build:"
          du -sh dmg_build
          
          # Detailed disk space check
          df -h
                
          # Verbose DMG creation with size estimation
          echo "Creating DMG..."
          # hdiutil create -volname "OpenIPC Config" -srcfolder dmg_build -ov -format UDZO "${DMG_NAME}"
          hdiutil create \
            -volname "OpenIPC Config" \
            -srcfolder dmg_build \
            -ov \
            -format UDZO \
            -fs HFS+ \
            -size 500m \
            "${DMG_NAME}"
      
          # Cleanup 
          rm -rf dmg_build
        shell: bash
            
      # Linux Icon and Packaging
      - name: Set up Icon and .desktop file
        if: matrix.os == 'ubuntu-latest'
        run: |
          APP_NAME="OpenIPC-Config"
          PUBLISH_DIR="./OpenIPC_Config.Desktop/bin/Release/net8.0/linux-${{ matrix.arch }}/publish"
          
          # Print publish directory contents for debugging
          echo "Contents of publish directory:"
          ls -la "$PUBLISH_DIR"
          
          # Find the actual executable
          EXECUTABLE=$(find "$PUBLISH_DIR" -name "OpenIPC_Config.Desktop" -type f)
          
          if [ -z "$EXECUTABLE" ]; then
            echo "Error: Could not find executable"
            exit 1
          fi
          
          # Create Assets directory if it doesn't exist
          mkdir -p "${PUBLISH_DIR}/Assets"
          
          # Copy icon to the publish directory
          cp ./OpenIPC_Config/Assets/Icons/OpenIPC.png "${PUBLISH_DIR}/Assets/OpenIPC.png"
          
          # Create .desktop file path
          DESKTOP_FILE="${PUBLISH_DIR}/${APP_NAME}-App.desktop"
          ICON_PATH="./Assets/OpenIPC.png"
          
          # Create .desktop file
          cat << EOF > "$DESKTOP_FILE"
          [Desktop Entry]
          Name=OpenIPC Config
          Exec=$(basename "$EXECUTABLE")
          Icon=$ICON_PATH
          Type=Application
          Terminal=false
          Categories=Utility;
          EOF
          
          # Ensure executable permissions
          chmod +x "$EXECUTABLE"
          chmod +x "$DESKTOP_FILE"
        shell: bash
      
      # Windows Icon and Packaging
      - name: Set Windows Icon and Package
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          $PUBLISH_DIR = "./OpenIPC_Config.Desktop/bin/Release/net8.0/win-${{ matrix.arch }}/publish"
          
          $ICON_PATH = "./OpenIPC_Config/Assets/Icons/OpenIPC.ico"

          # Install rcedit to modify the Windows executable icon
          choco install rcedit -y
          rcedit "$PUBLISH_DIR/OpenIPC_Config.Desktop.exe" --set-icon "$ICON_PATH"

          # Zip the Windows build
          Compress-Archive -Path "$PUBLISH_DIR\*" -DestinationPath "OpenIPC-Config-windows-${{ matrix.arch }}.zip"
        env:
          DOTNET_ROOT: C:\Program Files\dotnet
          VERSION: 0.0.1
    
      - name: Zip .app Bundle for MacOS and Linux
        run: |
          echo "Runner OS: ${{ runner.os }}"
          if [[ "${{ runner.os }}" == "macOS" ]]; then
            # DMG_NAME="OpenIPC-Config-macos-${{ matrix.arch }}.dmg"
            # APP_NAME="OpenIPC_Config.app"
            # BUILD_DIR="OpenIPC-Config-macos-${{ matrix.arch }}-dmg-build"
            
            # # Create a temporary folder for the .dmg contents
            # mkdir -p "${BUILD_DIR}"
            # cp -R "${APP_NAME}" "${BUILD_DIR}/"
            
            # # Create an alias to the Applications folder
            # ln -s /Applications "${BUILD_DIR}/Applications"
            
            # # Create the .dmg with the Applications alias
            # hdiutil create -volname "OpenIPC Config" -srcfolder "${BUILD_DIR}" -ov -format UDZO "${DMG_NAME}"
            
            # # Aggressive cleanup
            # rm -rf "${BUILD_DIR}"
            # rm -rf "${APP_NAME}"
            df -h  # Check disk space
            
          elif [[ "${{ runner.os }}" == "Linux" ]]; then

            mkdir -p OpenIPC-Config-linux-${{ matrix.arch }}
            cp -r ./OpenIPC_Config.Desktop/bin/Release/net8.0/linux-${{ matrix.arch }}/publish/* OpenIPC-Config-linux-${{ matrix.arch }}/
            zip -r OpenIPC-Config-linux-${{ matrix.arch }}.zip OpenIPC-Config-linux-${{ matrix.arch }}
             echo "directory created"
             ls -al
            # zip -r OpenIPC-Config-linux-${{ matrix.arch }}.zip ./OpenIPC_Config.Desktop/bin/Release/net8.0/linux-${{ matrix.arch }}/publish/*
          fi
        shell: bash
      
      # Upload Artifacts
      - name: Upload macOS Artifact
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: OpenIPC-Config-macos-${{ matrix.arch }}.dmg
          path: OpenIPC-Config-macos-${{ matrix.arch }}.dmg
          compression-level: 9

      - name: Upload Windows Artifact
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: OpenIPC-Config-windows-${{ matrix.arch }}
          path: OpenIPC-Config-windows-${{ matrix.arch }}.zip
          compression-level: 9

      - name: Upload Ubuntu Artifact
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: OpenIPC-Config-linux-${{ matrix.arch }}
          path: OpenIPC-Config-linux-${{ matrix.arch }}.zip
          compression-level: 9

  release:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Read Version from VERSION File
        id: get_version
        run: |
          #VERSION=$(cat VERSION)
          VERSION=${GITHUB_REF#refs/tags/}
          echo "VERSION=$VERSION" >> $GITHUB_ENV
        shell: bash


      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: .

      - name: List Downloaded Files
        run: ls -R .

      - name: Generate latest.json
        run: |
          cat << EOF > latest.json
          {
          "version": "${{ env.VERSION }}",
          "release_notes": "This is a dynamically generated release note. Update as needed.",
          "download_url": "https://github.com/${{ github.repository }}/releases/"
          }
          EOF

      - name: Create GitHub Release and Upload Assets
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          draft: true
          generate_release_notes: true
          body: |
            ## OpenIPC Multiplatform Configurator
            
            Thank you for using OpenIPC Configurator! This application helps you configure OpenIPC cameras for FPV use.
            
            ### Installation Instructions:
            - **Windows**: Extract the zip file and run the executable
            - **macOS**: Mount the DMG file and drag the app to your Applications folder
            - **Linux**: Download the zip file, open terminal, cd into folder, and run ./OpenIPC_Config.Desktop
                        
            ---
          files: |
            ./OpenIPC-Config-*/OpenIPC-Config-*.zip
            ./OpenIPC-Config-*/OpenIPC-Config-*.dmg
            ./latest.json
