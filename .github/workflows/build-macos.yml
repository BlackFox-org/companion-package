name: Build MacOS OpenIPC Config Avalonia App

on:
  push:
    branches:
      - test-actions

jobs:
  build:
    name: Build and Package for macOS
    runs-on: macos-latest
    strategy:
      matrix:
        os: [macos-latest]
        arch: [arm64]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.404'

      - name: Install iOS Workloads (Optional)
        run: dotnet workload install ios

      - name: Restore dependencies
        run: dotnet restore OpenIPC_Config.Desktop/OpenIPC_Config.Desktop.csproj

      - name: Build project
        run: dotnet build OpenIPC_Config.Desktop/OpenIPC_Config.Desktop.csproj --configuration Release

      - name: Publish project
        run: dotnet publish OpenIPC_Config.Desktop/OpenIPC_Config.Desktop.csproj -c Release -r osx-arm64 --self-contained


      - name: Package as macOS .app
        run: |
          APP_NAME="OpenIPC_Config"
          PUBLISH_DIR="./OpenIPC_Config.Desktop/bin/Release/net8.0/osx-arm64/publish"
          APP_DIR="${APP_NAME}.app"
          
          # Create the app bundle structure
          mkdir -p "${APP_DIR}/Contents/MacOS"
          mkdir -p "${APP_DIR}/Contents/Resources"
          
          # Copy the published binaries
          cp -R "${PUBLISH_DIR}/"* "${APP_DIR}/Contents/MacOS/"
          
          # Copy the icon file
          cp ./OpenIPC_Config/Assets/Icons/OpenIPC.icns "${APP_DIR}/Contents/Resources/${APP_NAME}.icns"
          
          # Create the Info.plist file
          cat << EOF > "${APP_DIR}/Contents/Info.plist"
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>CFBundleName</key>
            <string>${APP_NAME}</string>
            <key>CFBundleExecutable</key>
            <string>${APP_NAME}.Desktop</string>
            <key>CFBundleIdentifier</key>
            <string>com.openipc.${APP_NAME}</string>
            <key>CFBundleVersion</key>
            <string>0.1</string>
            <key>CFBundlePackageType</key>
            <string>APPL</string>
            <key>LSMinimumSystemVersion</key>
            <string>10.13</string>
            <key>CFBundleIconFile</key>
            <string>${APP_NAME}.icns</string>
          </dict>
          </plist>
          EOF
                
          ls -al ${APP_DIR}/Contents/MacOS/
          
          # Set executable permissions for the main binary
          chmod +x "${APP_DIR}/Contents/MacOS/${APP_NAME}.Desktop"

      - name: Remove Quarantine Flag
        run: xattr -cr OpenIPC_Config.app

#      - name: Code Sign the App (Optional)
#        run: |
#          CODESIGN_CERT="Developer ID Application: YOUR_CERT_NAME"
#          codesign --deep --force --verify --verbose --sign "$CODESIGN_CERT" OpenIPC-Config.app || echo "Code signing failed, skipping."

      - name: Zip .app Bundle
        run: zip -r OpenIPC-Config-macos-arm64.zip OpenIPC_Config.app

      - name: Upload macOS App Artifact
        uses: actions/upload-artifact@v3
        with:
          name: OpenIPC-Config-macos-arm64
          path: OpenIPC-Config-macos-arm64.zip
          
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: "Release ${{ github.ref_name }}"
          generate_release_notes: true
          draft: false
          prerelease: false
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: OpenIPC-Config-macos-arm64.zip
          asset_name: OpenIPC-Config-macos-arm64.zip
          asset_content_type: application/zip
